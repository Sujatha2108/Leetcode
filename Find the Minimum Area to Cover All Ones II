from typing import List
from itertools import combinations

class Solution:
    def minimumSum(self, grid: List[List[int]]) -> int:
        ones = [(i, j) for i in range(len(grid)) for j in range(len(grid[0])) if grid[i][j] == 1]
        n = len(ones)
        
        # Bounding box area of given set of points
        def area(points):
            rows = [p[0] for p in points]
            cols = [p[1] for p in points]
            return (max(rows) - min(rows) + 1) * (max(cols) - min(cols) + 1)

        best = float("inf")

        # Enumerate partitions into 3 groups
        # Idea: pick 2 "cuts" that separate into 3 non-empty groups
        for split1 in range(1, n-1):
            for split2 in range(split1+1, n):
                # Group 1
                for comb1 in combinations(range(n), split1):
                    set1 = set(comb1)
                    rem1 = [i for i in range(n) if i not in set1]

                    # Now split rem1 into set2 and set3
                    for comb2 in combinations(rem1, split2 - split1):
                        set2 = set(comb2)
                        set3 = [i for i in rem1 if i not in set2]

                        A1 = area([ones[i] for i in set1])
                        A2 = area([ones[i] for i in set2])
                        A3 = area([ones[i] for i in set3])
                        best = min(best, A1 + A2 + A3)
        return best
